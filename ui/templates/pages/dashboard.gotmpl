{{ define "title" }} 
DNSify | Dashboard 
{{ end }} 


{{ define "record-row" }}
  <tr class="dns-records__row fade-in fade-row-out" id="{{.Hash}}">
    <td>{{.Data.RecordType}}</td>
    <td>{{.Name}}</td>
    <td>
      <span class="dns-records__description">
        {{- if eq .Data.RecordType "A" -}} resolves to 
        {{- else if eq .Data.RecordType "AAAA" -}} resolves to 
        {{- else if eq .Data.RecordType "CNAME" -}} is an alias of 
        {{- else if eq .Data.RecordType "TXT" -}} returns 
        {{- else if eq .Data.RecordType "NS" -}} directs to 
        {{- else if eq .Data.RecordType "MX" -}} mail handled by 
        {{- else if eq .Data.RecordType "SRV" -}} service located at 
        {{- else if eq .Data.RecordType "CAA" -}} authorization at 
        {{- end -}}
      </span>
      {{.Data.Value}}
    </td>    

    <td>{{.TTL}}</td>
    <td class="dns-records__action-cell">

    {{- if or (eq .Data.RecordType "A") (eq .Data.RecordType "AAAA") -}}
      <form class="dns-records__config-form" action="/dashboard/config/nginx" method="POST">
          <input type="hidden" name="hash" value="{{.Hash}}">
          <button class="btn btn-clear" type="submit">Config</button>
      </form>
    {{- end -}}
    <button class="btn btn-delete" 
            hx-delete="/records?Type={{.Data.RecordType}}&FQDN={{.Name}}&IP={{.Data.Value}}&TTL={{.TTL}}"
            hx-confirm="Are you sure you want to delete this record?" 
            hx-target="closest tr" 
            hx-swap="outerHTML swap:1s">
      Delete
    </button>
    </td>
  </tr>
{{ end }}

{{ define "record-rows"}}
      {{range .}}
        {{ template "record-row" . }}
      {{end}}
{{ end }}
{{ define "content" }}


{{ template "main-page-actions"}}

<div class="container" >
  <h2 class="heading"> {{ .Zone }}</h2>

  <!-- Server Status Info Bar  -->
  <div class="info-bar-sse-wrapper" hx-ext="sse" sse-connect="/status" sse-swap="message">

  </div>

  <!-- Dns Record Entry Form -->
  <div class="dns-entry" x-data="dnsForm">
        <p class="dns-entry__title">Create a new record</p>
        <div class="dns-entry__type-selector">
          <ul class="dns-entry__types">
            <template x-for="type in dnsTypes" :key="type">
            <li
                x-data="{ showTooltip: false }"
                :class="{ 
                    'dns-entry__type--active': activeType === type,
                    'dns-entry__type--disabled': !supportedTypes.includes(type)
                }"
                class="dns-entry__type"
                @click="supportedTypes.includes(type) && (activeType = type)"
                :aria-disabled="!supportedTypes.includes(type)"            
                :hx-get="`/records?type=${type}`"
                hx-target="#dns_records_table tbody"
                hx-indicator="#spinner"
            >
                <span x-text="type"></span>
            </li>
            </template>
          </ul>
        </div>
        <div class="dns-entry__separator"></div>

        <div class="dns-entry__form-container">
          <form
            id="dns-entry-form"
            class="dns-entry__form"
            hx-post="/records"
            hx-swap="afterbegin"
            hx-target="#dns_records_table tbody"
            hx-indicator="#spinner"
            x-init="init"
          >
            <!-- Hostname  -->
            <div class="dns-entry__input-group dns-entry__input-group--hostname">
              <label for="hostname">Hostname</label>
              <input
                type="text"
                id="hostname"
                name="hostname"
                placeholder="Enter hostname"
                required
                @input="hostnameDirty=true"
                @blur="hostnameDirty=true"
                @change="hostnameDirty=true"
                x-model="hostname"
                :class="{ 'error': !validateHostname() }"
              />
              <span
                class="dns-entry__error-message"
                x-show="!validateHostname()"
                x-text="hostnameError">
              </span
              >
              <span
                class="dns-entry__fqdn-label"
                x-text="hostname ? `${hostname}.rusty-leipzig.com.` : ''"
              ></span>
            </div>

            <!-- Unified Value Input Field -->
              <div class="dns-entry__input-group">
                  <label x-text="valueFieldLabel()"></label>
                  <input
                      type="text"
                      :id="valueFieldId()"
                      name="value"
                      :placeholder="valueFieldPlaceholder()"
                      x-model="recordData.value"
                      @input="valueDirty = true"
                      :class="{ 'error': valueDirty && !validateValue() }"
                  />
                  <span class="dns-entry__error-message" x-show="valueDirty && !validateValue()" x-text="valueErrorMessage()"></span>
              </div>
        
            <!-- TTL  -->
            <div class="dns-entry__input-group dns-entry__input-group--ttl">
              <label for="ttl">TTL (seconds)</label>
              <input
                type="number"
                id="ttl"
                name="ttl"
                x-model="ttl"
                placeholder="Enter TTL"
                required
                :class="{ 'error': !validateTtl() }"
              />
              <input
                type="hidden"
                id="recordType"
                name="type"
                x-model="activeType"
              />
              <span class="dns-entry__error-message" x-show="!validateTtl()"
                >Invalid Time-To-Live</span
              >
            </div>

            <div class="dns-entry__input-group">
              <label style="visibility: hidden">Submit button</label>
              <button
                id="dns-entry-submit-btn"
                class="btn  dns-entry__submit-btn"
                type="submit"
                :disabled="!isValidForm()"
              >
                Create Record
              </button>
            </div>
          </form>
        </div>
      </div>

  <!-- Spinner for loading  -->
<div id="spinner" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
 <div id="server-error" class="server-error" style="display:none;">
    <div id="error-message" ></div>
</div>

<span class="dns-records__heading">DNS Records</span>
<div class="dns-records">
  <table id="dns_records_table" class="dns-records__table">
    <thead>
      <tr>
        <th>Type</th>
        <th>Hostname</th>
        <th>Value</th>
        <th>TTL (seconds)</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      {{range .Records}}
        {{ template "record-row" . }}
      {{end}}
    </tbody>
  </table>
</div></div>
<script>
      const dnsForm = {
        activeType: "A",
        dnsTypes: ["A", "AAAA", "CNAME", "NS", "MX", "TXT","SRV", "SOA", "CAA"],
        supportedTypes: ["A", "AAAA", "CNAME", "NS","MX", "TXT"],
        hostname: "",
        hostnameError: '',
        ip: "",
        ttl: "3600",
        hostnameDirty: false,
        ipDirty: false,
        hostnameRegex: /^(?!-)[a-zA-Z0-9-]{1,63}(?<!-)$/,
        ipv4Regex: /^(?!0)(?!.*\.$)((1?\d?\d|25[0-5]|2[0-4]\d)(\.|$)){4}$/,
        ipv6Regex: /^([0-9a-fA-F]{0,4}:){2,7}[0-9a-fA-F]{0,4}$/,

        valueDirty: false,
        recordData: {
            value: ''
        },

        valueFieldLabel() {
            switch (this.activeType) {
                case 'A': return "IPv4 Address";
                case 'AAAA': return 'IPv6 Address';
                case 'CNAME': return 'Alias';
                case 'NS': return 'Nameserver';
                case "MX": return 'MX Record (Priority: Mail Server)'
                case "TXT": return 'TXT Value'
                default: return '';
            }
        },

        valueFieldId() {
            return this.activeType.toLowerCase() + 'Value';
        },

        valueFieldPlaceholder() {
            switch (this.activeType) {
                case 'A': return "Enter IPv4 Address";
                case 'AAAA': return 'Enter IPv6 Address';
                case 'CNAME': return 'Enter Alias FQDN (e.g., host.example.com.)';
                case 'NS': return 'Enter Nameserver FQDN (e.g., host.example.com.)';
                case 'MX': return 'Enter Priority and Mail Server (e.g., 10:mail.example.com.)'; 
                case 'TXT': return 'Enter TXT String here'; 
                default: return '';
            }
        },

        valueErrorMessage() {
            switch (this.activeType) {
                case 'A': return 'Invalid IPv4 Address';
                case 'AAAA': return 'Invalid IPv6 Address';
                case 'CNAME': return 'Invalid Alias';
                case 'NS': return 'Invalid Nameserver';
                case 'MX': return 'Invalid MX Record';
                case 'TXT': return 'Invalid TXT Value';
                default: return '';
            }
        },

        validateValue() {
            const value = this.recordData.value.trim();
            switch (this.activeType) {
                case 'A': return this.ipv4Regex.test(value);
                case 'AAAA': return this.ipv6Regex.test(value);
                case 'CNAME':
                case 'NS': return /^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}\.$/.test(value);
                case 'MX': return this.validateMX(value);
                case 'TXT': return this.validateTXT(value);
                default: return false;
            }
        },

       formatValue() {
              return this.recordData.value;
          },

        isValidForm() {
            const valid = this.validateHostname() && this.validateValue() && this.validateTtl();
            console.log("The validity is: ", valid)
            return valid;
        },
            
        validateIP() {
          if (!this.ipDirty) return true;
          const regex = this.activeType === 'AAAA' ? this.ipv6Regex : this.ipv4Regex;
          return regex.test(this.recordData.ip.trim());
        },
      validateNameserver() {
          if (!this.nameserverDirty) return true;
          const regex = /^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}$/;
          return regex.test(this.recordData.nameserver.trim());
        },
        validateHostname() {
          if (!this.hostnameDirty) {
            return true;
          }

          const existingHostnames = Array.from(document.querySelectorAll('#dns_records_table td:nth-child(2)')).map(td => {
              const fqdn = td.textContent.trim();
              const regex = /^(.*?)\.[\w-]+\.[\w-]+\.?$/;
              const match = fqdn.match(regex);
              return match ? match[1] : '';
          });
          if (existingHostnames.includes(this.hostname.trim())) {
            this.hostnameError = 'Duplicate subdomain';
            return false;
          } else if (!this.hostnameRegex.test(this.hostname.trim())) {
            this.hostnameError = 'Invalid subdomain';
            return false;
          }
          return true;
        },

        validateIp() {
          if (!this.ipDirty) {
            return true;
          }
          const value = this.ip.trim();

          if (value === "@" && this.activeType !== "A") {
            return false;
          }

          if (value === "@" && this.activeType === "A") {
            return true;
          }

          const currentRegex =
            this.activeType === "AAAA" ? this.ipv6Regex : this.ipv4Regex;

          if (!currentRegex.test(value)) {
            return false;
          }
          return true;
        },

        validateMX(value) {
            const parts = value.split(':');
            if (parts.length !== 2) return false;
            const priority = parseInt(parts[0], 10);
            if (isNaN(priority)) return false;
            return /^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}\.$/.test(parts[1]);
        },
        validateTXT(value) {
            return value.length > 0 && value.length <= 255;
        },
        validateTtl() {
          const value = parseInt(this.ttl.trim(), 10);
          if (isNaN(value) || value < 60) {
            return false;
          }
          return true;
        },

        isFormFilled: function () {
          return this.hostname && this.ip && this.ttl;
        },
        setHostnameDirty: function () {
          this.hostnameDirty = true;
        },

        setIpDirty: function () {
          this.ipDirty = true;
        },

        resetForm : function() {
          this.hostname = ''
          this.ip = ''
          this.hostnameDirty = false 
          this.ipDirty = false
          this.recordData.value = ''
          this.valueDirty = false
        },
        
         init() {
              this.$el.addEventListener('htmx:afterRequest', (e) => {
              if(e.detail.successful && e.detail.requestConfig.verb == "post") {
                  this.resetForm();
              }
              });
          },
         getRecordsUrl(type) {
                return `/records?type=${type}`;
            },
      };
    </script>
<script src="/static/js/index.js"></script>
{{ end }}
