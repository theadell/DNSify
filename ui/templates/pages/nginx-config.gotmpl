{{ define "title" }}
Nginx Config
{{ end }}
{{ define "additionalStyles" }}
<link rel="stylesheet" href="/static/css/config-view.css">
<link rel="stylesheet" href="/static/vendor/highlight/styles/default.min.css">
{{ end }}
{{ define "content" }}

{{ template "auxiliary-page-actions"}}

<div class="nginx-config-wrapper">
      
    <div class="nginx-config-form">
      
      <h5 class="config-title"> Nginx Config Options</h5>
        <form class="nginx-config__form" hx-put="/dashboard/config/nginx" hx-target="#nginx-config-snippet" hx-swap="innerHTML transition:true">

          <div class="checkbox-group">
          <span>Server</span>
          <div class="input-group">
            <label for="domain">Domain</label>
            <input type="text" id="domain" name="domain" placeholder="Enter Domain" value="{{ .Domain }}" readonly disabled />
            <input type="hidden"  name="hash" value="{{ .Hash }}"  />
          </div>

          <div class="input-group">
            <label for="serviceAddress">Service/Container Address</label>
            <input type="text" id="serviceAddress" placeholder="Enter Service Address" value="{{.Addr}}" id="listen-address" name="listen_address" class="field__input" placeholder="e.g., http://localhost:8080" />
          </div>
          </div>

          <div class="checkbox-group">
            <label>
              <input type="checkbox" name="use_http2" />
              Use HTTP2
            </label>
            <label class="b-contain">
              <input type="checkbox" name="ws_headers" />
              Include WebSocket Headers
            </label>
          </div>

          <div class="checkbox-group">
            <span>OCSP DNS Resolvers</span>
            <label>
              <input type="checkbox" name="cloudflare_resolver" />
              Cloudflare Resolver
            </label>
            <label>
              <input type="checkbox" name="google_public_dns" />
              Google Public DNS
            </label>
          </div>

          <div class="checkbox-group">
            <span>Logging and rate limiting</span>
            <label>
              <input type="checkbox" name="enable_logging" />
              Enable Logging
            </label>
            <label>
              <input type="checkbox" name="enable_rate_limiting" />
              Enable Rate Limiting
            </label>
          </div>

          <div class="checkbox-group">
            <span>HTTPS</span>
            <label>
              <input type="checkbox" name="force_https" checked disabled />
              Force HTTPS (http://* â†’ https://*)
            </label>
            <label>
              <input type="checkbox" name="strict_transport" />
              Enable Strict Transport Security
            </label>
            <label>
              <input type="checkbox" name="include_subdomains" />
              IncludeSubDomains directive
            </label>
          </div>

          <button type="submit" class="btn">Generate Config</button>
        </form>
    </div>

      <div class="nginx-config-display">

    <h5 class="config-title">/etc/nginx/sites-available/{{- .Domain -}}</h5>

        <div class="highlight-js-wrapper">
        <pre class="display__code">
            <code class="nginx" id="nginx-config-snippet">
                {{- template "nginx" . -}}
            </code>
         <div class="config-actions">
                <button class="btn" id="btn-config-download" download="{{- .Domain -}}">Download</button>
                <button class="btn " onclick="copyToClipboard()">Copy to Clipboard</button>
            </div>
          </pre>
        </div>
   
    </div>

</div>
<script>
    
document.getElementById('btn-config-download').addEventListener('click', function () {
    var text = document.querySelector('.display__code code').textContent.trim();
    var comment = [
        "# Configuration file generated by DNSify.",
        "# Generated on: " + new Date().toLocaleString(),
        "# versions:",
        "#   DNSify v0.1.0",
        "\n",
    ].join("\n");
    var fullText = comment + text;
    var blob = new Blob([fullText], { type: 'text/plain' });
    var url = window.URL.createObjectURL(blob);
    
    var tempLink = document.createElement('a');
    tempLink.href = url;

    var filename = this.getAttribute('download') || 'config.txt';
    tempLink.setAttribute('download', filename);

    document.body.appendChild(tempLink);
    tempLink.click();
    document.body.removeChild(tempLink);
});


    function copyToClipboard() {
        const range = document.createRange();
        range.selectNode(document.querySelector('.display__code code'));
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range);
        document.execCommand('copy');
        window.getSelection().removeAllRanges();
        alert('Config copied to clipboard!');
    }

 document.body.addEventListener('htmx:afterSwap', function(event) {
  hljs.highlightAll();
 });
</script>
<script src="/static/vendor/highlight/highlight.min.js"> </script>
<script>hljs.highlightAll();</script>
{{- end -}}
