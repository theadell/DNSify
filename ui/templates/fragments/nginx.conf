{{- $domain := .Domain -}}
{{- $sslCert := .SSLCert -}}
{{- $sslKey := .SSLKey -}}
{{- $addr := .Addr -}}
{{- $ipv4 := .IPv4 -}}
{{- $ipv6 := .IPv6 -}}
{{- $useHttp2 := .UseHttp2 -}}
{{- $addWsHeaders := .AddWsHeaders -}}
{{- $enableRateLimit := .EnableRateLimit -}}
{{- $enableLogging := .EnableLogging -}}
{{- $enableHSTS := .EnableHSTS -}}
{{- $includeSubDomains := .IncludeSubDomains -}}
{{- $useGooglePublicDNS := .UseGooglePublicDNS -}}
{{- $useCloudflareResolver := .UseCloudflareResolver -}}
# HTTP server configuration for {{ $domain }}
server {
    # Listen on port 80 for HTTP requests
    listen {{ $ipv4 }}:80;

    {{- if $ipv6 }}
    # IPv6 support
    listen [{{ $ipv6 }}]:80;
    {{- end }}

    # Domain name for this server block
    server_name {{ $domain }};

    location / {
        # Redirect all HTTP requests to HTTPS for security
        return 301 https://$host$request_uri;
    }
}

# HTTPS server configuration for {{ $domain }}
server {
    # Listen on port 443 for secure HTTPS requests
    listen {{ $ipv4 }}:443 ssl{{ if $useHttp2 }} http2{{ end }};

    {{- if $ipv6 }}
    # IPv6 support for secure connections
    listen [{{ $ipv6 }}]:443 ssl{{ if $useHttp2 }} http2{{ end }};
    {{- end }}

    # Domain name for this server block
    server_name {{ $domain }};

    # SSL settings to ensure secure communication
    ssl_certificate {{ $sslCert }};
    ssl_certificate_key {{ $sslKey }};
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

    {{- if or $useCloudflareResolver $useGooglePublicDNS }}
    # Enabling OCSP stapling for SSL certificates.
    ssl_stapling on;
    ssl_stapling_verify on;

    # Setting DNS resolvers for OCSP stapling.
    resolver {{ if $useCloudflareResolver }}1.1.1.1 1.0.0.1{{ end }}{{ if and $useCloudflareResolver $useGooglePublicDNS }} {{ end }}{{ if $useGooglePublicDNS }}8.8.8.8 8.8.4.4{{ end }} valid=60s;
    {{- end }}

    {{- if $enableHSTS }}
    # Enabling HTTP Strict Transport Security (HSTS) to ensure browsers use HTTPS.
    add_header Strict-Transport-Security "max-age=31536000{{ if $includeSubDomains }}; includeSubDomains{{ end }}";
    {{- end }}

    location / {
        # Forward requests to the specified server and port
        proxy_pass {{ $addr }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        {{- if $addWsHeaders }}
        # Headers for WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        {{- end }}
    }

    {{- if $enableRateLimit }}
    # Rate limiting settings to protect against excessive requests
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;
    limit_req zone=mylimit burst=20;
    {{- end }}

    {{- if $enableLogging }}
    # Logging paths for request and error logs
    access_log /var/log/nginx/{{ $domain }}_access.log;
    error_log /var/log/nginx/{{ $domain }}_error.log;
    {{- end }}
}

